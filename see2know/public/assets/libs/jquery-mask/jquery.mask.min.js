// jQuery Mask Plugin v1.10.12 - adaptada pela webcargo
// github.com/igorescobar/jQuery-Mask-Plugin
(function (e) { if (typeof define === "function" && define.amd) { define(["jquery"], e) } else { e(window.jQuery || window.Zepto) } })(function (e) { "use strict"; var t = function (t, n, r) { t = e(t); var i = this, s = t.val(), o; n = typeof n === "function" ? n(t.val(), undefined, t, r) : n; var u = { invalid: [], getCaret: function () { try { var e, n = 0, r = t.get(0), i = document.selection, s = r.selectionStart; if (i && !~navigator.appVersion.indexOf("MSIE 10")) { e = i.createRange(); e.moveStart("character", t.is("input") ? -t.val().length : -t.text().length); n = e.text.length } else if (s || s === "0") { n = s } return n } catch (o) { } }, setCaret: function (e) { try { if (t.is(":focus")) { var n, r = t.get(0); if (r.setSelectionRange) { r.setSelectionRange(e, e) } else if (r.createTextRange) { n = r.createTextRange(); n.collapse(true); n.moveEnd("character", e); n.moveStart("character", e); n.select() } } } catch (i) { } }, events: function () { t.on("keyup.mask", u.behaviour).on("paste.mask drop.mask", function () { setTimeout(function () { t.keydown().keyup() }, 100) }).on("change.mask", function () { t.data("changed", true) }).on("blur.mask", function () { if (s !== t.val() && !t.data("changed")) { t.trigger("change") } t.data("changed", false) }).on("keyup.mask, blur.mask", function () { s = t.val() }).on("focusout.mask", function () { if (r.clearIfNotMatch && !o.test(u.val())) { u.val("") } }) }, getRegexMask: function () { var e = [], t, r, s, o, u, a; for (var f = 0; f < n.length; f++) { t = i.translation[n[f]]; if (t) { r = t.pattern.toString().replace(/.{1}$|^.{1}/g, ""); s = t.optional; o = t.recursive; if (o) { e.push(n[f]); u = { digit: n[f], pattern: r } } else { e.push(!s && !o ? r : r + "?") } } else { e.push(n[f].replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")) } } a = e.join(""); if (u) { a = a.replace(new RegExp("(" + u.digit + "(.*" + u.digit + ")?)"), "($1)?").replace(new RegExp(u.digit, "g"), u.pattern) } return new RegExp(a) }, destroyEvents: function () { t.off(["keydown", "keyup", "paste", "drop", "blur", "focusout", ""].join(".mask ")) }, val: function (e) { var n = t.is("input"), r = n ? "val" : "text", i; if (arguments.length > 0) { if (t[r]() !== e) { t[r](e) } i = t } else { i = t[r]() } return i }, getMCharsBeforeCount: function (e, t) { for (var r = 0, s = 0, o = n.length; s < o && s < e; s++) { if (!i.translation[n.charAt(s)]) { e = t ? e + 1 : e; r++ } } return r }, caretPos: function (e, t, r, s) { var o = i.translation[n.charAt(Math.min(e - 1, n.length - 1))]; return !o ? u.caretPos(e + 1, t, r, s) : Math.min(e + r - t - s, r) }, behaviour: function (t) { t = t || window.event; u.invalid = []; var n = t.keyCode || t.which; if (e.inArray(n, i.byPassKeys) === -1) { var r = u.getCaret(), s = u.val(), o = s.length, a = r < o, f = u.getMasked(), l = f.length, c = u.getMCharsBeforeCount(l - 1) - u.getMCharsBeforeCount(o - 1); u.val(f); if (a && !(n === 65 && t.ctrlKey)) { if (!(n === 8 || n === 46)) { r = u.caretPos(r, o, l, c) } u.setCaret(r) } return u.callbacks(t) } }, getMasked: function (e) { var t = [], s = u.val(), o = 0, a = n.length, f = 0, l = s.length, c = 1, h = "push", d = -1, v, m; if (r.reverse) { h = "unshift"; c = -1; v = 0; o = a - 1; f = l - 1; m = function () { return o > -1 && f > -1 } } else { v = a - 1; m = function () { return o < a && f < l } } while (m()) { var g = n.charAt(o), y = s.charAt(f), b = i.translation[g]; if (b) { if (y.match(b.pattern)) { t[h](y); if (b.recursive) { if (d === -1) { d = o } else if (o === v) { o = d - c } if (v === d) { o -= c } } o += c } else if (b.optional) { o += c; f -= c } else if (b.fallback) { t[h](b.fallback); o += c; f -= c } else { u.invalid.push({ p: f, v: y, e: b.pattern }) } f += c } else { if (!e) { t[h](g) } if (y === g) { f += c } o += c } } var w = n.charAt(v); if (a === l + 1 && !i.translation[w]) { t.push(w) } return t.join("") }, callbacks: function (e) { var i = u.val(), o = i !== s, a = [i, e, t, r], f = function (e, t, n) { if (typeof r[e] === "function" && t) { r[e].apply(this, n) } }; f("onChange", o === true, a); f("onKeyPress", o === true, a); f("onComplete", i.length === n.length, a); f("onInvalid", u.invalid.length > 0, [i, e, t, u.invalid, r]) } }; i.mask = n; i.options = r; i.remove = function () { var e = u.getCaret(); u.destroyEvents(); u.val(i.getCleanVal()); u.setCaret(e - u.getMCharsBeforeCount(e)); return t }; i.getCleanVal = function () { return u.getMasked(true) }; i.init = function (n) { n = n || false; r = r || {}; i.byPassKeys = e.jMaskGlobals.byPassKeys; i.translation = e.jMaskGlobals.translation; i.translation = e.extend({}, i.translation, r.translation); i = e.extend(true, {}, i, r); o = u.getRegexMask(); if (n === false) { if (r.placeholder) { t.attr("placeholder", r.placeholder) } t.attr("autocomplete", "off"); u.destroyEvents(); u.events(); var s = u.getCaret(); u.val(u.getMasked()); u.setCaret(s + u.getMCharsBeforeCount(s, true)) } else { u.events(); u.val(u.getMasked()) } }; i.init(!t.is("input")) }; e.maskWatchers = {}; var n = function () { var n = e(this), i = {}, s = "data-mask-", o = n.attr("data-mask"); if (n.attr(s + "reverse")) { i.reverse = true } if (n.attr(s + "clearifnotmatch")) { i.clearIfNotMatch = true } if (r(n, o, i)) { return n.data("mask", new t(this, o, i)) } }, r = function (t, n, r) { r = r || {}; var i = e(t).data("mask"), s = JSON.stringify; try { return typeof i !== "object" || s(i.options) !== s(r) || i.mask !== n } catch (o) { } }; e.fn.mask = function (n, i) { i = i || {}; var s = this.selector, o = e.jMaskGlobals, u = e.jMaskGlobals.watchInterval, a = function () { if (r(this, n, i)) { return e(this).data("mask", new t(this, n, i)) } }; e(this).each(a); if (s && s !== "" && o.watchInputs) { clearInterval(e.maskWatchers[s]); e.maskWatchers[s] = setInterval(function () { e(document).find(s).each(a) }, u) } }; e.fn.unmask = function () { clearInterval(e.maskWatchers[this.selector]); delete e.maskWatchers[this.selector]; return this.each(function () { if (e(this).data("mask")) { e(this).data("mask").remove().removeData("mask") } }) }; e.fn.cleanVal = function () { return this.data("mask").getCleanVal() }; var i = { maskElements: "input,td,span,div", dataMaskAttr: "*[data-mask]", dataMask: true, watchInterval: 300, watchInputs: true, watchDataMask: false, byPassKeys: [9, 16, 17, 18, 36, 37, 38, 39, 40, 91], translation: { 0: { pattern: /\d/ }, 9: { pattern: /\d/, optional: true }, "#": { pattern: /\d/, recursive: true }, A: { pattern: /[a-zA-Z0-9]/ }, S: { pattern: /[a-zA-Z]/ } } }; e.jMaskGlobals = e.jMaskGlobals || {}; i = e.jMaskGlobals = e.extend(true, {}, i, e.jMaskGlobals); if (i.dataMask) { e(i.dataMaskAttr).each(n) } setInterval(function () { if (e.jMaskGlobals.watchDataMask) { e(document).find(e.jMaskGlobals.maskElements).filter(i.dataMaskAttr).each(n) } }, i.watchInterval) })